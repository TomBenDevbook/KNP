<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>start gameserver, need to be set variable players</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>creation database of clients</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Clients=ds_map_create();
//servername=blekota()+blekota();


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Establish TCP server</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//PUBLIC VARIABLES
/*
gameserver, serverport
*/

//establish tcp gameserver
write_log('Trying to establish tcp gameserver.');
serverport = FIRST_PORT; //start with this serverport number 

  gameserver = network_create_server(network_socket_tcp, serverport, players);      // variable players needs to be set by creator
 while (gameserver &lt; 0 &amp;&amp; serverport &lt; FIRST_PORT+4)
    {
    serverport++
    gameserver = network_create_server(network_socket_tcp, serverport, players);    // variable players needs to be set by creator
    }    
if serverport&gt;=FIRST_PORT+4 { write_log('Fail to establish tcp gameserver. No response on any serverport..');  game_end(); } 
else
{
write_log('TCP gameserver '+string(gameserver)+' created at serverport '+string(serverport)+' for '+string(players)+' players.');
}







 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>532</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_effect</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>50</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>50</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
          <argument>
            <kind>13</kind>
            <string>65408</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> 
 
//----------------------------------------------------------------------------------------
if ds_map_find_value(async_load, "type")==1 //incoming connection
{
var socket=ds_map_find_value(async_load, "socket");
ids=instance_create(200,-100,slot);                      //vytvořit mimo okno
ds_map_add(Clients,socket,ids);                          //Clients has server link: socket &lt;-&gt; instance_id

(ids).IP=ds_map_find_value(async_load, "IP");            //IP původu
(ids).socket=ds_map_find_value(async_load, "socket");    //socket připojení
(ids).number=real((ids).socket);                         //pořadové číslo
(ids).y=(ids).number*(PLAYER_LINE_HEIGHT);

write_log('IP: '+string((ids).IP)+' on socket: '+string((ids).socket)+' connected to: '+string(ids));

effect_create_above(ef_ring,50,50,1,c_green);

}

//---------------------------------------------------------------------------------------
if ds_map_find_value(async_load, "type")==2 //disconnect
{
with(ds_map_find_value(Clients,ds_map_find_value(async_load, "socket")))
{
instance_destroy();
}
ds_map_delete(Clients,ds_map_find_value(async_load, "socket"));

effect_create_above(ef_ring,50,50,1,c_red);
write_log('Socket: '+string(ds_map_find_value(async_load, "socket"))+' disconnected.');
}
//----------------------------------------------------------------------------------------

if ds_map_find_value(async_load, "type")==3 //data packets
{



//read values
var buff=ds_map_find_value(async_load, "buffer");                //buffer_create(512,buffer_grow,1);
buffer_seek(buff,buffer_seek_start,0);
stype=buffer_read(buff,buffer_string);
sname=buffer_read(buff,buffer_string);
sstatus=buffer_read(buff,buffer_string);
schoice=buffer_read(buff,buffer_string);
sindex=buffer_read(buff,buffer_string);
//buffer_delete(buff); // deleted later - double usage



with(ds_map_find_value(Clients,ds_map_find_value(async_load, "id")))
{
type=obj_server.stype;
name=obj_server.sname;
status=obj_server.sstatus;
choice=obj_server.schoice;
index=obj_server.sindex;
sprite_index=s_type;
image_index=real(index);
effect_create_above(ef_ring,50,y,1,c_blue);

write_log('Data arrived to id '+string(id)+' (type,name,status,choice,index): '+string(type)+', '+string(name)+', '+string(status)+', '+string(choice)+', '+string(index)+' .');
}



ids=ds_map_find_value(Clients,ds_map_find_value(async_load, "id"));

hafan=ds_queue_create(); //collect herd of slots------------------------------------------------- in
with(slot)
{
ds_queue_enqueue(obj_server.hafan,name);
}

//send response
var buff=buffer_create(1024,buffer_grow,1);

buffer_seek(buff,buffer_seek_start,0);
buffer_write(buff,buffer_string,servername); //server name

while(!ds_queue_empty(hafan))
{
buffer_write(buff,buffer_string,ds_queue_dequeue(hafan)); //name --------------------------------- out
}
ds_queue_destroy(hafan);

buffer_write(buff,buffer_string,'test'); //end of message
buffer_write(buff,buffer_string,'EOM'); //end of message


network_send_packet((ids).socket, buff, buffer_tell(buff) );
buffer_delete(buff);


}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text(10,10,string(instance_number(slot))+', '+string(ds_map_size(Clients)));




</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
